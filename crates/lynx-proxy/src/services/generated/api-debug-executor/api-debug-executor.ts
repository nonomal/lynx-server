/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import type {
  ExecuteApiDebugRequest,
  ResponseDataWrapperExecuteApiDebugResponse,
} from '../utoipaAxum.schemas';

import { customInstance } from '../../customInstance';

export const executeApiRequest = (
  executeApiDebugRequest: ExecuteApiDebugRequest,
  signal?: AbortSignal,
) => {
  return customInstance<ResponseDataWrapperExecuteApiDebugResponse>({
    url: `/api_debug_executor/execute`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: executeApiDebugRequest,
    signal,
  });
};

export const getExecuteApiRequestMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof executeApiRequest>>,
    TError,
    { data: ExecuteApiDebugRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof executeApiRequest>>,
  TError,
  { data: ExecuteApiDebugRequest },
  TContext
> => {
  const mutationKey = ['executeApiRequest'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof executeApiRequest>>,
    { data: ExecuteApiDebugRequest }
  > = (props) => {
    const { data } = props ?? {};

    return executeApiRequest(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ExecuteApiRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof executeApiRequest>>
>;
export type ExecuteApiRequestMutationBody = ExecuteApiDebugRequest;
export type ExecuteApiRequestMutationError = void;

export const useExecuteApiRequest = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof executeApiRequest>>,
      TError,
      { data: ExecuteApiDebugRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof executeApiRequest>>,
  TError,
  { data: ExecuteApiDebugRequest },
  TContext
> => {
  const mutationOptions = getExecuteApiRequestMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
