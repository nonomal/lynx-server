/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';

import { RequestStatus, ResponseCode } from '../utoipaAxum.schemas';
import type { ResponseDataWrapperExecuteApiDebugResponse } from '../utoipaAxum.schemas';

export const getExecuteApiRequestResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperExecuteApiDebugResponse> = {},
): ResponseDataWrapperExecuteApiDebugResponse => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    errorMessage: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined,
    ]),
    id: faker.number.int({ min: undefined, max: undefined }),
    responseBody: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined,
    ]),
    responseHeaders: faker.helpers.arrayElement([
      faker.helpers.arrayElement([null]),
      undefined,
    ]),
    responseStatus: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    responseTime: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    status: faker.helpers.arrayElement(Object.values(RequestStatus)),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getExecuteApiRequestMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperExecuteApiDebugResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperExecuteApiDebugResponse>
        | ResponseDataWrapperExecuteApiDebugResponse),
) => {
  return http.post('*/api_debug_executor/execute', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getExecuteApiRequestResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};
export const getApiDebugExecutorMock = () => [
  getExecuteApiRequestMockHandler(),
];
