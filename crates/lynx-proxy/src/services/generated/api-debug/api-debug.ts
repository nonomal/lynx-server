/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateApiDebugRequest,
  ListDebugEntriesParams,
  ResponseDataWrapperApiDebugListResponse,
  ResponseDataWrapperApiDebugResponse,
  ResponseDataWrapperApiDebugStats,
  ResponseDataWrapperTupleUnit,
  ResponseDataWrapperU64,
  UpdateApiDebugRequest,
} from '../utoipaAxum.schemas';

import { customInstance } from '../../customInstance';

export const listDebugEntries = (
  params?: ListDebugEntriesParams,
  signal?: AbortSignal,
) => {
  return customInstance<ResponseDataWrapperApiDebugListResponse>({
    url: `/api_debug/debug`,
    method: 'GET',
    params,
    signal,
  });
};

export const getListDebugEntriesQueryKey = (
  params?: ListDebugEntriesParams,
) => {
  return [`/api_debug/debug`, ...(params ? [params] : [])] as const;
};

export const getListDebugEntriesQueryOptions = <
  TData = Awaited<ReturnType<typeof listDebugEntries>>,
  TError = void,
>(
  params?: ListDebugEntriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listDebugEntries>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListDebugEntriesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listDebugEntries>>
  > = ({ signal }) => listDebugEntries(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listDebugEntries>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListDebugEntriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof listDebugEntries>>
>;
export type ListDebugEntriesQueryError = void;

export function useListDebugEntries<
  TData = Awaited<ReturnType<typeof listDebugEntries>>,
  TError = void,
>(
  params: undefined | ListDebugEntriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listDebugEntries>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDebugEntries>>,
          TError,
          Awaited<ReturnType<typeof listDebugEntries>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListDebugEntries<
  TData = Awaited<ReturnType<typeof listDebugEntries>>,
  TError = void,
>(
  params?: ListDebugEntriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listDebugEntries>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDebugEntries>>,
          TError,
          Awaited<ReturnType<typeof listDebugEntries>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListDebugEntries<
  TData = Awaited<ReturnType<typeof listDebugEntries>>,
  TError = void,
>(
  params?: ListDebugEntriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listDebugEntries>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useListDebugEntries<
  TData = Awaited<ReturnType<typeof listDebugEntries>>,
  TError = void,
>(
  params?: ListDebugEntriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listDebugEntries>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListDebugEntriesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createDebugEntry = (
  createApiDebugRequest: CreateApiDebugRequest,
  signal?: AbortSignal,
) => {
  return customInstance<ResponseDataWrapperApiDebugResponse>({
    url: `/api_debug/debug`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createApiDebugRequest,
    signal,
  });
};

export const getCreateDebugEntryMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDebugEntry>>,
    TError,
    { data: CreateApiDebugRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createDebugEntry>>,
  TError,
  { data: CreateApiDebugRequest },
  TContext
> => {
  const mutationKey = ['createDebugEntry'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createDebugEntry>>,
    { data: CreateApiDebugRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createDebugEntry(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateDebugEntryMutationResult = NonNullable<
  Awaited<ReturnType<typeof createDebugEntry>>
>;
export type CreateDebugEntryMutationBody = CreateApiDebugRequest;
export type CreateDebugEntryMutationError = void;

export const useCreateDebugEntry = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createDebugEntry>>,
      TError,
      { data: CreateApiDebugRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createDebugEntry>>,
  TError,
  { data: CreateApiDebugRequest },
  TContext
> => {
  const mutationOptions = getCreateDebugEntryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const clearAllDebugEntries = () => {
  return customInstance<ResponseDataWrapperU64>({
    url: `/api_debug/debug`,
    method: 'DELETE',
  });
};

export const getClearAllDebugEntriesMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clearAllDebugEntries>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof clearAllDebugEntries>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['clearAllDebugEntries'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof clearAllDebugEntries>>,
    void
  > = () => {
    return clearAllDebugEntries();
  };

  return { mutationFn, ...mutationOptions };
};

export type ClearAllDebugEntriesMutationResult = NonNullable<
  Awaited<ReturnType<typeof clearAllDebugEntries>>
>;

export type ClearAllDebugEntriesMutationError = void;

export const useClearAllDebugEntries = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof clearAllDebugEntries>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof clearAllDebugEntries>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getClearAllDebugEntriesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getDebugStats = (signal?: AbortSignal) => {
  return customInstance<ResponseDataWrapperApiDebugStats>({
    url: `/api_debug/debug/stats`,
    method: 'GET',
    signal,
  });
};

export const getGetDebugStatsQueryKey = () => {
  return [`/api_debug/debug/stats`] as const;
};

export const getGetDebugStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof getDebugStats>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDebugStats>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDebugStatsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDebugStats>>> = ({
    signal,
  }) => getDebugStats(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDebugStats>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDebugStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDebugStats>>
>;
export type GetDebugStatsQueryError = void;

export function useGetDebugStats<
  TData = Awaited<ReturnType<typeof getDebugStats>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebugStats>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDebugStats>>,
          TError,
          Awaited<ReturnType<typeof getDebugStats>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDebugStats<
  TData = Awaited<ReturnType<typeof getDebugStats>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebugStats>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDebugStats>>,
          TError,
          Awaited<ReturnType<typeof getDebugStats>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDebugStats<
  TData = Awaited<ReturnType<typeof getDebugStats>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebugStats>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetDebugStats<
  TData = Awaited<ReturnType<typeof getDebugStats>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebugStats>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDebugStatsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getDebugEntry = (id: number, signal?: AbortSignal) => {
  return customInstance<ResponseDataWrapperApiDebugResponse>({
    url: `/api_debug/debug/${id}`,
    method: 'GET',
    signal,
  });
};

export const getGetDebugEntryQueryKey = (id: number) => {
  return [`/api_debug/debug/${id}`] as const;
};

export const getGetDebugEntryQueryOptions = <
  TData = Awaited<ReturnType<typeof getDebugEntry>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebugEntry>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDebugEntryQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDebugEntry>>> = ({
    signal,
  }) => getDebugEntry(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDebugEntry>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDebugEntryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDebugEntry>>
>;
export type GetDebugEntryQueryError = void;

export function useGetDebugEntry<
  TData = Awaited<ReturnType<typeof getDebugEntry>>,
  TError = void,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebugEntry>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDebugEntry>>,
          TError,
          Awaited<ReturnType<typeof getDebugEntry>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDebugEntry<
  TData = Awaited<ReturnType<typeof getDebugEntry>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebugEntry>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDebugEntry>>,
          TError,
          Awaited<ReturnType<typeof getDebugEntry>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDebugEntry<
  TData = Awaited<ReturnType<typeof getDebugEntry>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebugEntry>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetDebugEntry<
  TData = Awaited<ReturnType<typeof getDebugEntry>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebugEntry>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDebugEntryQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateDebugEntry = (
  id: number,
  updateApiDebugRequest: UpdateApiDebugRequest,
) => {
  return customInstance<ResponseDataWrapperApiDebugResponse>({
    url: `/api_debug/debug/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateApiDebugRequest,
  });
};

export const getUpdateDebugEntryMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateDebugEntry>>,
    TError,
    { id: number; data: UpdateApiDebugRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateDebugEntry>>,
  TError,
  { id: number; data: UpdateApiDebugRequest },
  TContext
> => {
  const mutationKey = ['updateDebugEntry'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateDebugEntry>>,
    { id: number; data: UpdateApiDebugRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateDebugEntry(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateDebugEntryMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateDebugEntry>>
>;
export type UpdateDebugEntryMutationBody = UpdateApiDebugRequest;
export type UpdateDebugEntryMutationError = void;

export const useUpdateDebugEntry = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateDebugEntry>>,
      TError,
      { id: number; data: UpdateApiDebugRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateDebugEntry>>,
  TError,
  { id: number; data: UpdateApiDebugRequest },
  TContext
> => {
  const mutationOptions = getUpdateDebugEntryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteDebugEntry = (id: number) => {
  return customInstance<ResponseDataWrapperTupleUnit>({
    url: `/api_debug/debug/${id}`,
    method: 'DELETE',
  });
};

export const getDeleteDebugEntryMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDebugEntry>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDebugEntry>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteDebugEntry'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDebugEntry>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteDebugEntry(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteDebugEntryMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDebugEntry>>
>;

export type DeleteDebugEntryMutationError = void;

export const useDeleteDebugEntry = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteDebugEntry>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteDebugEntry>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteDebugEntryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
